{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\GitHub\\\\interculturality-game\\\\src\\\\components\\\\TrueFalseQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrueFalseQuestion = ({\n  question,\n  retryQuestion,\n  onAnswer\n}) => {\n  _s();\n  const [answered, setAnswered] = useState(false); // État pour gérer si l'utilisateur a répondu à la première question\n  const [retryMode, setRetryMode] = useState(false); // Mode retry pour afficher la deuxième question\n  const [showRetryExplanation, setShowRetryExplanation] = useState(false); // Affiche le texte explicatif après une mauvaise réponse\n  const [resultMessage, setResultMessage] = useState(''); // Message personnalisé à afficher après la première réponse\n\n  // Gère la réponse à la première question\n  const handleAnswer = isTrue => {\n    setAnswered(true);\n    if (isTrue === question.correct) {\n      setResultMessage('Bravo ! Vous avez raison.');\n      onAnswer(true); // Informe que la réponse est correcte\n    } else {\n      setResultMessage('Dommage ! Ce n’est pas la bonne réponse.');\n      setShowRetryExplanation(true); // Affiche le texte explicatif en cas de mauvaise réponse\n    }\n  };\n\n  // Passe à la question de retry après le message explicatif\n  const handleRetryExplanationEnd = () => {\n    setShowRetryExplanation(false); // Cache le texte explicatif\n    setRetryMode(true); // Active le mode retry pour afficher la deuxième question\n  };\n\n  // Gère la réponse à la question de retry\n  const handleRetryAnswer = isTrue => {\n    if (isTrue === retryQuestion.correct) {\n      setResultMessage('Bravo ! Vous avez bien répondu à la deuxième question.');\n      onAnswer(true); // Informe que la réponse à la retry question est correcte\n    } else {\n      setResultMessage('Dommage ! Ce n’était toujours pas la bonne réponse.');\n      onAnswer(false); // Informe que la réponse à la retry question est incorrecte\n    }\n    setRetryMode(false); // Termine le mode retry après la deuxième question\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"true-false-question\",\n    children: [!answered && !retryMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswer(true),\n        children: \"Vrai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswer(false),\n        children: \"Faux\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), answered && !retryMode && !showRetryExplanation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: resultMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), showRetryExplanation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Dommage, vous n'avez pas bien r\\xE9pondu \\xE0 la premi\\xE8re question. Nous vous proposons une autre question.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetryExplanationEnd,\n        children: \"Continuer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), retryMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: retryQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRetryAnswer(true),\n        children: \"Vrai\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRetryAnswer(false),\n        children: \"Faux\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(TrueFalseQuestion, \"oE8TvjAwRslvb1pc48Dz5TmWAM4=\");\n_c = TrueFalseQuestion;\nexport default TrueFalseQuestion;\nvar _c;\n$RefreshReg$(_c, \"TrueFalseQuestion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TrueFalseQuestion","question","retryQuestion","onAnswer","_s","answered","setAnswered","retryMode","setRetryMode","showRetryExplanation","setShowRetryExplanation","resultMessage","setResultMessage","handleAnswer","isTrue","correct","handleRetryExplanationEnd","handleRetryAnswer","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Nathan/Documents/GitHub/interculturality-game/src/components/TrueFalseQuestion.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TrueFalseQuestion = ({ question, retryQuestion, onAnswer }) => {\r\n  const [answered, setAnswered] = useState(false);  // État pour gérer si l'utilisateur a répondu à la première question\r\n  const [retryMode, setRetryMode] = useState(false);  // Mode retry pour afficher la deuxième question\r\n  const [showRetryExplanation, setShowRetryExplanation] = useState(false);  // Affiche le texte explicatif après une mauvaise réponse\r\n  const [resultMessage, setResultMessage] = useState('');  // Message personnalisé à afficher après la première réponse\r\n\r\n  // Gère la réponse à la première question\r\n  const handleAnswer = (isTrue) => {\r\n    setAnswered(true);\r\n    if (isTrue === question.correct) {\r\n      setResultMessage('Bravo ! Vous avez raison.');\r\n      onAnswer(true);  // Informe que la réponse est correcte\r\n    } else {\r\n      setResultMessage('Dommage ! Ce n’est pas la bonne réponse.');\r\n      setShowRetryExplanation(true);  // Affiche le texte explicatif en cas de mauvaise réponse\r\n    }\r\n  };\r\n\r\n  // Passe à la question de retry après le message explicatif\r\n  const handleRetryExplanationEnd = () => {\r\n    setShowRetryExplanation(false);  // Cache le texte explicatif\r\n    setRetryMode(true);  // Active le mode retry pour afficher la deuxième question\r\n  };\r\n\r\n  // Gère la réponse à la question de retry\r\n  const handleRetryAnswer = (isTrue) => {\r\n    if (isTrue === retryQuestion.correct) {\r\n      setResultMessage('Bravo ! Vous avez bien répondu à la deuxième question.');\r\n      onAnswer(true);  // Informe que la réponse à la retry question est correcte\r\n    } else {\r\n      setResultMessage('Dommage ! Ce n’était toujours pas la bonne réponse.');\r\n      onAnswer(false);  // Informe que la réponse à la retry question est incorrecte\r\n    }\r\n    setRetryMode(false);  // Termine le mode retry après la deuxième question\r\n  };\r\n\r\n  return (\r\n    <div className=\"true-false-question\">\r\n      {/* Affiche la première question */}\r\n      {!answered && !retryMode && (\r\n        <div>\r\n          <p>{question.text}</p>\r\n          <button onClick={() => handleAnswer(true)}>Vrai</button>\r\n          <button onClick={() => handleAnswer(false)}>Faux</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Affiche le message personnalisé après la première réponse */}\r\n      {answered && !retryMode && !showRetryExplanation && (\r\n        <div>\r\n          <p>{resultMessage}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Affiche le message explicatif après une mauvaise réponse */}\r\n      {showRetryExplanation && (\r\n        <div>\r\n          <p>Dommage, vous n'avez pas bien répondu à la première question. Nous vous proposons une autre question.</p>\r\n          <button onClick={handleRetryExplanationEnd}>Continuer</button>  {/* Bouton pour passer à la question de retry */}\r\n        </div>\r\n      )}\r\n\r\n      {/* Affiche la question de retry */}\r\n      {retryMode && (\r\n        <div>\r\n          <p>{retryQuestion.text}</p>\r\n          <button onClick={() => handleRetryAnswer(true)}>Vrai</button>\r\n          <button onClick={() => handleRetryAnswer(false)}>Faux</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrueFalseQuestion;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}